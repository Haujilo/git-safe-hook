#! /usr/bin/env python

import sys
import fileinput
import subprocess


class RejectError(Exception):

    code = 255
    msg = ""

    def reject(self):
        if self.msg:
            sys.stdout.write(self.msg)
        sys.exit(self.code)


class ProtectMasterBranchError(RejectError):

    code = 1
    msg = "branch master is protected, no one can delete or force push"


class ProtectReleaseTagError(RejectError):

    code = 2
    msg = "release tag is protected, no one can delete or force push"


class Git(object):

    DEPLOYER_TAGGER_EMAIL = subprocess.check_output(
        'git config --system user.email', shell=True).strip()

    @staticmethod
    def is_null_commit(commit_id):
        return True if commit_id == '0' * len(commit_id) else False

    @staticmethod
    def is_force_push(old_commit_id, new_commit_id):
        merge_base = subprocess.check_output(
            "git merge-base %s %s" % (old_commit_id, new_commit_id),
            shell=True,
        ).strip()
        return old_commit_id != merge_base

    @staticmethod
    def is_someone_tag(ref, someone_email=DEPLOYER_TAGGER_EMAIL):
        output = subprocess.check_output(
            "git for-each-ref --format='%%(objecttype) %%(taggeremail)' %s" % (
                ref, ),
            shell=True,
        ).split()
        if output[0] != 'tag':
            return False
        return someone_email == output[1][1:-1]


def protect_master_branch(old_commit_id, new_commit_id):
    if Git.is_null_commit(old_commit_id):
        return
    if Git.is_null_commit(new_commit_id):
        raise ProtectMasterBranchError()
    if Git.is_force_push(old_commit_id, new_commit_id):
        raise ProtectMasterBranchError()


def protect_release_tag(old_commit_id, new_commit_id, ref):
    if Git.is_null_commit(old_commit_id):
        return
    if Git.is_null_commit(new_commit_id) or old_commit_id != new_commit_id:
        if Git.is_someone_tag(ref):
            raise ProtectReleaseTagError()


def main():
    try:
        for line in fileinput.input():
            old_commit_id, new_commit_id, ref = line.split()
            if ref == 'refs/heads/master':
                protect_master_branch(old_commit_id, new_commit_id)
            elif ref.startswith('refs/tags/'):
                protect_release_tag(old_commit_id, new_commit_id, ref)
    except RejectError as error:
        error.reject()


main()
